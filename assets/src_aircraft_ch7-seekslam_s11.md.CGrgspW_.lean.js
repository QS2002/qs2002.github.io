import{_ as t,c as r,o as s,j as e,a as l}from"./chunks/framework.CDhRSyRB.js";const m=JSON.parse('{"title":"§7.11 路径规划","description":"","frontmatter":{},"headers":[],"relativePath":"src/aircraft/ch7-seekslam/s11.md","filePath":"src/aircraft/ch7-seekslam/s11.md"}'),n={name:"src/aircraft/ch7-seekslam/s11.md"};function c(o,a,P,p,i,C){return s(),r("div",null,a[0]||(a[0]=[e("h1",{id:"§7-11-路径规划",tabindex:"-1"},[l("§7.11 路径规划 "),e("a",{class:"header-anchor",href:"#§7-11-路径规划","aria-label":'Permalink to "§7.11 路径规划"'},"​")],-1),e("p",null,"采用RRT进行局部路径规划, CCPP进行全局全覆盖路径规划.CCPP主要用于解决大模型决策不稳定问题.",-1),e("p",null,"全覆盖路径规划(complete coverage path planning, CCPP)问题的任务是确定一条路径，该路径在避开障碍物的情况下通过一个区域或一定空间范围内的所有点。",-1),e("p",null,"Choset根据环境地图是否先验已知，将全覆盖路径规划算法分为“在线式”和“离线式”两类。离线式CCPP算法只依赖于静态环境信息，并且假设环境是先验已知的。然而，在许多情况下，假设对环境有充分的先验知识可能是不现实的。在线式CCPP算法不假设对要覆盖的环境有充分的先验知识，而是利用传感器数据实时扫描目标空间。因此，这些后期算法也被称为基于传感器的覆盖算法。",-1),e("p",null,"根据CCPP算法工作原理不同，可以分为随机碰撞法、单元分解法、生物激励法、模板法、智能算法等，但CCPP算法都应该满足覆盖必须满足的要求，主要有：",-1),e("p",null,"机器人必须通过目标区域内除障碍物外的所有点，完全覆盖目标区域； 机器人在覆盖过程中应尽量避免路径重复； 为了控制方便，应尽量使用简单的运动轨迹(例如，直线或圆)； 在允许条件下，获得一条“最优”路径(路线总长度最短或能量消耗最少)；",-1),e("p",null,"全覆盖路径规划(CCPP)算法通常用于机器人特殊作业场景，例如机器人清扫，机器人地面施工等。这类场景通常需要机器人运行路径上的Footprint将区域地面进行全覆盖，从而实现对一个区域的全覆盖作业。早期我们接触的机器人路径规划方法基本上都是一种点到点（PTP）的规划方式，例如A*，D*等等，它们的特点是绕障、运行路径最短及无平滑，相信国内很多刚接触移动机器人规划算法的同学，也是从它们开始接触路径规划。CCPP算法是应对机器人特殊作业而产生的一种路径规划方法，本质上不应该是一种算法，而是一种算法的集合体，从而实现某种功能。",-1),e("p",null,"全覆盖路径规划用的比较多的思想是人工势场法，通过对规划区域添加某种形式的人工势场，来引导路径规划的搜索方向，同时中间还会参杂一些绕障的点到点的规划。全覆盖路径规划按照覆盖规划的方式可以分为弓子型的规划和回字型规划，这也是目前清洁机器人领域用的比较多的两种规划方法。",-1)]))}const f=t(n,[["render",c]]);export{m as __pageData,f as default};
