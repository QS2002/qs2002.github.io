import{_ as l,c as i,o as a,ag as n}from"./chunks/framework.CDhRSyRB.js";const e="/assets/%E9%A3%9E%E6%8E%A7%E6%9E%B6%E6%9E%84%E5%9B%BE_v1.BGBmcY7v.png",d=JSON.parse('{"title":"基于rp2040的四旋翼飞控固件(embassy框架版本)","description":"","frontmatter":{},"headers":[],"relativePath":"src/aircraft/ch6-quad/index.md","filePath":"src/aircraft/ch6-quad/index.md"}'),r={name:"src/aircraft/ch6-quad/index.md"};function t(p,s,h,o,c,u){return a(),i("div",null,s[0]||(s[0]=[n(`<h1 id="基于rp2040的四旋翼飞控固件-embassy框架版本" tabindex="-1">基于rp2040的四旋翼飞控固件(embassy框架版本) <a class="header-anchor" href="#基于rp2040的四旋翼飞控固件-embassy框架版本" aria-label="Permalink to &quot;基于rp2040的四旋翼飞控固件(embassy框架版本)&quot;">​</a></h1><ul><li>参考[<a href="https://github.com/peterkrull/quad" target="_blank" rel="noreferrer">https://github.com/peterkrull/quad</a>]和[<a href="https://github.com/holsatus/holsatus-flight" target="_blank" rel="noreferrer">https://github.com/holsatus/holsatus-flight</a>]</li></ul><h2 id="项目目录" tabindex="-1">项目目录 <a class="header-anchor" href="#项目目录" aria-label="Permalink to &quot;项目目录&quot;">​</a></h2><ol><li>.cargo : 编译器配置</li><li>cargo-generate : (忽略)</li><li>docs : 相关文档</li><li>examples : 示例例程</li><li>src : 代码目录</li><li>static : 部分库代码</li><li>target : 编译产物</li><li>tests : 总体测试代码</li><li>vendor : 所有依赖库</li><li>Cargo.toml : 项目配置</li><li>memory.x : MCU内存分配</li><li>rust-toolchain.toml : 编译器版本配置</li><li>assets : 截图和开发参考代码</li></ol><h2 id="使用说明" tabindex="-1">使用说明 <a class="header-anchor" href="#使用说明" aria-label="Permalink to &quot;使用说明&quot;">​</a></h2><p>使用串口(usb_cdc)命令行操作飞控:</p><ul><li>usbmodem666666661, 通信参数: 115200, 8N1</li><li>另一个usbmodem666666663暂未用到</li></ul><p><strong>上电后就会自动让四个电机保持低速旋转, 没有arm(解锁)</strong></p><div class="language-sh vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 打印帮助信息</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">help</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Basic commands:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  clear   Clear the shell output, \`clear\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  logo    Show the logo graphic, \`logo\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  blink   Blink commands, \`blink\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  greet   Hello commands, \`greet\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  go      go commands, \`go\`, example: go move forward 1, go take_off</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  motor   motor commands, \`motor\`</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#  sensor  sensor commands, \`sensor\`, example: sensor get micoair</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 起飞(100cm离地高度)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> take_off</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 降落</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">go</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> landing</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 直接控制1#电机转速到100(100不是最大转速)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">motor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> speed</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 获取传感器数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sensor</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> imu</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="开发说明" tabindex="-1">开发说明 <a class="header-anchor" href="#开发说明" aria-label="Permalink to &quot;开发说明&quot;">​</a></h2><h3 id="代码文件" tabindex="-1">代码文件 <a class="header-anchor" href="#代码文件" aria-label="Permalink to &quot;代码文件&quot;">​</a></h3><ol><li>drivers : 外设驱动(imu, esc) <ul><li>imu : 惯性传感器单元 <ul><li>mpu6050.rs : mpu6050六轴传感器</li></ul><ul><li>atk_imu901 : 正点原子ATK-IMU901十轴传感器驱动 <ul><li>defines.rs : 数据结构定义</li><li>utils.rs : 工具函数</li></ul><ul><li>functions : 解析数据函数 <ul><li>atk_ms901m.rs : 处理帧数据并整合为imu数据</li><li>frame_state_machine.rs : 帧解析状态机</li></ul></li></ul></li></ul></li><li>esc : 电子调节器(电调) <ul><li>little_bee.rs : 小蜜蜂电调</li><li>micoair_4in1.rs : 微空四合一电调</li></ul></li><li>optical_flow : 光流位移传感器 <ul><li>micoair_mtf02p.rs : 微空MTF-02P光流传感器</li></ul></li><li>tof : ToF距离传感器 <ul><li>benewake_tflc02.rs : 北醒TF-LC02激光测距传感器</li></ul></li></ul></li><li>modules : 紧耦合算法模块 <ul><li>controllers : 控制器 <ul><li>lqr : lqr线性二次调节控制器 <ul><li>lqr.rs : 实际的控制代码</li></ul></li></ul></li><li>filters : 滤波器 <ul><li>estimators : 位置估计(位移追踪)滤波器 <ul><li>extended_kalman.rs : 扩展卡尔曼滤波器</li><li>linear_kalman.rs : 线性卡尔曼滤波器</li></ul></li></ul><ul><li>baro_altitude_fusion_filter.rs : 气压高度融合滤波器</li><li>mean_filter.rs : 平均值滤波器</li></ul></li><li>errors : 错误处理</li><li>calibration : 传感器校准/标定</li><li>shell : 命令行交互 <ul><li>mod.rs : 定义run_cli接口</li><li>ubuffer.rs : 自定义的u8 buffer字符串处理</li><li>writer_sync.rs : 同步写入器</li><li>usb_adapter.rs : 适配到USB_CDC的读取/写入</li></ul><ul><li>commands : 命令定义 <ul><li>hello.rs : 定义hello命令</li><li>blink.rs : 闪灯命令</li><li>go.rs : 运动控制命令</li><li>motor.rs : 电机直接控制命令</li><li>sensor.rs : 传感器控制命令</li></ul></li></ul></li><li>mavlink2 : mavlink2协议栈</li><li>sbus : sbus协议栈</li><li>modelica : modelica建模语言(Model Based Design)</li></ul></li><li>tasks : 任务 <ul><li>blink.rs : led指示灯任务</li><li>circling.rs : 空中绕圈任务</li><li>demo.rs : 演示任务:起飞-&gt;盘旋-&gt;降落</li><li>landing.rs : 降落任务</li><li>logging.rs : 日志黑匣子任务</li><li>motors.rs : 电机控制任务@ESC</li><li>moving.rs : 空中前进后退左右移动任务</li><li>shell_cli.rs : 命令行解析任务</li><li>take_off.rs : 起飞任务</li><li>usb.rs : usb总线处理任务</li><li>motor_test.rs : 测试分别旋转四个电机任务</li><li>hovering.rs : 悬停任务</li><li>filters.rs : 滤波器任务</li><li>controllers.rs : 控制器任务</li><li>sensors.rs : 传感器任务</li><li>tests.rs : 测试核心算法任务</li></ul></li><li>utils : 工具 <ul><li>consts.rs : 常量</li></ul><ul><li>types : 类型 <ul><li>flight.rs : 飞行状态控制类型</li><li>sensor.rs : 传感器数据类型</li></ul></li><li>signals : 信号量</li></ul><ul><li>variables.rs : 全局变量</li></ul></li><li>applications : 顶层应用程序</li><li>main.rs : 飞控程序总入口</li></ol><h3 id="添加新功能流程" tabindex="-1">添加新功能流程 <a class="header-anchor" href="#添加新功能流程" aria-label="Permalink to &quot;添加新功能流程&quot;">​</a></h3><ol><li>drivers添加硬件驱动(可选)</li><li>tasks添加异步任务</li><li>utils::signals添加任务间通信的信号通道(订阅/发布模型)(可选)</li><li>shell::commands添加调用命令(可选)</li><li>main.rs启动任务</li></ol><h3 id="代码运行逻辑" tabindex="-1">代码运行逻辑 <a class="header-anchor" href="#代码运行逻辑" aria-label="Permalink to &quot;代码运行逻辑&quot;">​</a></h3><ul><li>main.rs -&gt; tasks -&gt; modules</li></ul><table tabindex="0"><thead><tr><th>飞控架构图</th></tr></thead><tbody><tr><td><img src="`+e+`" alt="飞控架构图"></td></tr></tbody></table><p>上电就自动启动多个任务, 任务持续监听任务消息, 然后自动执行.例如命令行接收到<code>go take_off 100</code>, 调用take_off_task任务, 获取sensor_task任务的数据和使用filter_task对传感器数据进行初步处理和融合, 计算出参数后使用controllers模块的代码控制四个电机旋转从而起飞.</p><h3 id="主要使用的第三方库" tabindex="-1">主要使用的第三方库 <a class="header-anchor" href="#主要使用的第三方库" aria-label="Permalink to &quot;主要使用的第三方库&quot;">​</a></h3><ol><li>embassy : 用于多任务及异步控制(RTOS平替方案?)</li></ol><ul><li>embassy_rp</li></ul><ol start="2"><li>paste : 宏编程</li><li>libm, nalgebra : 数学计算</li><li>embedded-cli : 命令行</li><li>ufmt : no_std的字符串处理</li><li>defmt : 调试信息打印</li><li>panic-probe : 连接probe-rs工具</li><li>serde : 字符串序列化</li><li>static_cell : 变量生命周期管理</li><li>heapless : 内存分配</li></ol><h2 id="无人机构型" tabindex="-1">无人机构型 <a class="header-anchor" href="#无人机构型" aria-label="Permalink to &quot;无人机构型&quot;">​</a></h2><div class="language-rs vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">rs</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// 四旋翼 &quot;x&quot; 构型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///   正面</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// M4     M2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///   \\   /</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///     |</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">///   /   \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// M3     M1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// 解释: \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// \`M1\` spins CW(正桨) \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// \`M2\` spins CCW(反桨) \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// \`M3\` spins CCW(反桨) \\</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// \`M4\` spins CW(正桨) \\</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="原理图接线" tabindex="-1">原理图接线 <a class="header-anchor" href="#原理图接线" aria-label="Permalink to &quot;原理图接线&quot;">​</a></h2><ul><li>MICO_RX2 : GP2</li><li>MICO_CURR : GP3</li><li>ATK_RX : GP4</li><li>ATK_TX : GP5</li><li>ATK_D0 : GP6</li><li>ATK_D1 : GP7</li><li>ATK_D2 : GP8</li><li>TF_TX : GP10</li><li>TF_RX : GP11</li><li>MICO_TX : GP12</li><li>MICO_RX : GP13</li><li>DSHOT_1 : GP14</li><li>DSHOT_2 : GP15</li><li>DSHOT_3 : GP16</li><li>DSHOT_4 : GP17</li><li>MICO_M1 : GP18</li><li>MICO_M2 : GP19</li><li>MICO_M3 : GP20</li><li>MICO_M4 : GP21</li><li>SUB_RX : GP26</li><li>SUB_TX : GP27</li><li>LED : GP25</li></ul>`,26)]))}const m=l(r,[["render",t]]);export{d as __pageData,m as default};
